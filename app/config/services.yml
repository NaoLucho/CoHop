# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    # AppBundle\:
    #     resource: '../../src/AppBundle/*'
    #     # you can exclude directories or files
    #     # but if a service is unused, it's removed anyway
    #     exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # # controllers are imported separately to make sure they're public
    # # and have a tag that allows actions to type-hint services
    # AppBundle\Controller\:
    #     resource: '../../src/AppBundle/Controller'
    #     public: true
    #     tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    adminbundle.event_listener.action_db:
        class: AdminBundle\Events\EventListener\ActionDBListener
        arguments: ["@service_container"]
        tags:
            #- { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: preRemove }
            #- { name: doctrine.event_listener, event: postRemove }
            #- { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: postPersist }
            #- { name: doctrine.event_listener, event: preFlush }
            #- { name: doctrine.event_listener, event: onFlush }
            - { name: doctrine.event_listener, event: postFlush }

# POUR ACTIVER LES PERMISSIONS ACL (a la place de sonata_admin-security-handler: sonata.admin.security.handler.role)
# services:
#     security.acl.permission.map:
#       class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap

    # app.admin.menu:
    #     class: Builder\PageBundle\Admin\MenuAdmin
    #     arguments: [~, Builder\PageBundle\Entity\Menu, ~]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: "Site", label: "Menus" }
    #     public: true

    # app.admin.menu_page:
    #     class: Builder\PageBundle\Admin\Menu_PageAdmin
    #     arguments: [~, Builder\PageBundle\Entity\Menu_Page, ~]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, show_in_dashboard: false, group: 'Site' }
    #     public: true

    # app.admin.page:
    #     class: Builder\PageBundle\Admin\PageAdmin
    #     arguments: [~, Builder\PageBundle\Entity\Page, ~]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: "Site", label: "Pages" }
    #     public: true

    # app.admin.content:
    #     class: Builder\PageBundle\Admin\ContentAdmin
    #     arguments: [~, Builder\PageBundle\Entity\Content, ~]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: "Site", label: "Contenus" }
    #     public: true

    # app.admin.page_content:
    #     class: Builder\PageBundle\Admin\Page_ContentAdmin
    #     arguments: [~, Builder\PageBundle\Entity\Page_Content, ~]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: 'Site', show_in_dashboard: false}
    #     public: true

    # app.admin.carousel:
    #     class: Builder\PageBundle\Admin\CarouselAdmin
    #     arguments: [~, Builder\PageBundle\Entity\Carousel, ~]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: "Site", label: "Carousel" }
    #     public: true